import pandas as pd
from deep_translator import GoogleTranslator
import time
import streamlit as st
import io
from streamlit.runtime.scriptrunner import add_script_run_ctx

# --- L√≥gica de Traducci√≥n ---

def translate_text(text_to_translate, target_language, retries=3, delay=2):
    """
    Traduce el texto usando el motor de Google Translate a trav√©s de deep-translator.
    Incluye reintentos para manejar errores de red.
    """
    if not isinstance(text_to_translate, str) or not text_to_translate.strip():
        return ""

    simple_target_lang = target_language.split('-')[0]

    for attempt in range(retries):
        try:
            translated_text = GoogleTranslator(source='auto', target=simple_target_lang).translate(text_to_translate)
            time.sleep(0.3)
            return translated_text
        except Exception as e:
            # Aqu√≠ usamos print, ya que estamos en una aplicaci√≥n web y no en la terminal.
            # Este mensaje se ver√° en los logs de la consola del servidor.
            print(f"[ERROR] Intento {attempt + 1} fallido para '{text_to_translate}': {e}")
            if attempt < retries - 1:
                print(f"[INFO] Reintentando en {delay * (2 ** attempt)} segundos...")
                time.sleep(delay * (2 ** attempt))
            else:
                print(f"[CR√çTICO] Fallaron todos los intentos para traducir '{text_to_translate}'.")
                return f"ERROR_TRADUCCION_FALLIDA: {e}"
    return "ERROR_INESPERADO"

# --- Interfaz de Streamlit ---

st.set_page_config(
    page_title="Traductor de Excel",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilo para un tema oscuro y moderno
st.markdown("""
<style>
    .reportview-container {
        background: #111;
        color: #eee;
    }
    .css-1d391kg {
        background-color: #212529;
    }
    h1, h2, h3 {
        color: #fca311;
    }
    .stButton>button {
        background-color: #fca311;
        color: black;
        border-radius: 10px;
        padding: 10px;
        border: none;
        transition: 0.3s;
        font-weight: bold;
    }
    .stButton>button:hover {
        background-color: #e59500;
        color: white;
    }
</style>
""", unsafe_allow_html=True)


# T√≠tulo y descripci√≥n
st.title("üåê Asistente de Traducci√≥n de Archivos Excel")
st.markdown("""
    ¬°Hola! Bienvenido a tu herramienta de traducci√≥n autom√°tica. Este programa te permite traducir r√°pidamente cualquier columna de texto en un archivo Excel (`.xlsx`) a m√∫ltiples idiomas.
    
    Est√° dise√±ado para ser **simple**, **robusto** y **did√°ctico**. Sigue los pasos numerados a continuaci√≥n para ver la magia en acci√≥n.
""")

st.divider()

# --- Secci√≥n para descargar el archivo de ejemplo ---
st.subheader("1. üìÇ Descarga nuestro archivo de ejemplo")
st.markdown("Para comenzar, descarga este archivo modelo. As√≠ puedes familiarizarte con el formato requerido por la aplicaci√≥n.")

sample_data = {
    'es': ['Hola mundo', 'La programaci√≥n es divertida.', 'Una nueva oportunidad laboral.', 'Este es un gran producto.'],
    'en': ['Hello world', 'Programming is fun.', 'A new job opportunity.', 'This is a great product.']
}
sample_df = pd.DataFrame(sample_data)

excel_buffer = io.BytesIO()
with pd.ExcelWriter(excel_buffer, engine='xlsxwriter') as writer:
    sample_df.to_excel(writer, index=False, sheet_name='Ejemplo')
excel_buffer.seek(0)

st.download_button(
    label="Descargar archivo de ejemplo (.xlsx)",
    data=excel_buffer,
    file_name="ejemplo_traduccion.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)

st.divider()

# --- Secci√≥n principal de la aplicaci√≥n ---
st.subheader("2. ‚¨ÜÔ∏è Sube tu archivo y traduce")
uploaded_file = st.file_uploader("Sube tu archivo Excel (.xlsx)", type=["xlsx"])

if uploaded_file:
    try:
        df_source = pd.read_excel(uploaded_file)
        st.success("üéâ ¬°Archivo cargado con √©xito! Aqu√≠ puedes ver una vista previa.")
        st.dataframe(df_source.head())

        col1, col2 = st.columns(2)

        with col1:
            # Selecci√≥n de columna de origen
            columns = df_source.columns.tolist()
            source_col = st.selectbox("3. Elige la columna que quieres traducir:", options=columns)

        with col2:
            # Selecci√≥n de idiomas de destino
            target_langs_str = st.text_input("4. Introduce los idiomas de destino (separados por comas)",
                                             placeholder="Ej: es, en, fr, de")
            target_langs = [lang.strip() for lang in target_langs_str.split(',') if lang.strip()]

        # Bot√≥n para iniciar la traducci√≥n
        if st.button("5. Iniciar Traducci√≥n"):
            if not source_col:
                st.error("Por favor, selecciona una columna de origen.")
            elif not target_langs:
                st.error("Por favor, introduce al menos un idioma de destino.")
            else:
                # Preparaci√≥n del DataFrame para la salida
                df_output = df_source.copy()
                
                # A√±adir columnas de destino si no existen
                for lang in target_langs:
                    col_name = f"{source_col}_{lang}"
                    if col_name not in df_output.columns:
                        df_output[col_name] = ""

                # Proceso de traducci√≥n
                total_rows = len(df_output)
                
                with st.status("Traducci√≥n en curso...", expanded=True) as status_bar:
                    for i, index in enumerate(df_output.index):
                        text_to_translate = str(df_source.at[index, source_col])
                        
                        status_bar.write(f"Traduciendo fila {i+1} de {total_rows}...")

                        for lang in target_langs:
                            col_name = f"{source_col}_{lang}"
                            try:
                                translated_text = translate_text(text_to_translate, lang)
                                df_output.at[index, col_name] = translated_text
                                status_bar.write(f"- Traducido a '{lang}' con √©xito.")
                            except Exception as e:
                                translated_text = f"ERROR: {e}"
                                df_output.at[index, col_name] = translated_text
                                status_bar.write(f"- [ERROR] Fallo al traducir a '{lang}': {e}")
                                
                    status_bar.update(label="¬°Traducci√≥n completada!", state="complete", expanded=False)

                st.success("‚úÖ ¬°Traducci√≥n completada!")
                st.dataframe(df_output)

                # Opci√≥n para descargar el archivo traducido
                excel_buffer_final = io.BytesIO()
                with pd.ExcelWriter(excel_buffer_final, engine='xlsxwriter') as writer:
                    df_output.to_excel(writer, index=False, sheet_name='Traducciones')
                excel_buffer_final.seek(0)
                
                st.download_button(
                    label="Descargar archivo traducido (.xlsx)",
                    data=excel_buffer_final,
                    file_name="traducciones_completadas.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
                
    except Exception as e:
        st.error(f"‚ùå ¬°Ocurri√≥ un error al procesar el archivo! Por favor, verifica que el formato sea correcto. Detalles: {e}")

st.divider()

# --- Secci√≥n de demostraci√≥n de tecnolog√≠as para reclutadores ---
with st.expander("Acerca de esta aplicaci√≥n y su tecnolog√≠a"):
    st.markdown("""
    Este programa est√° construido sobre una base robusta de bibliotecas de Python que demuestran conocimiento en **manipulaci√≥n de datos** y **desarrollo web con Python**.

    * **Streamlit**: Utilizado para crear la interfaz web interactiva con solo unas pocas l√≠neas de c√≥digo. Permite transformar un script de Python en una aplicaci√≥n completa, haciendo que el programa sea accesible para cualquier persona.
    * **Pandas**: La biblioteca est√°ndar de Python para el an√°lisis y la manipulaci√≥n de datos. Se utiliza para leer el archivo Excel en una estructura de datos `DataFrame`, facilitando la selecci√≥n y procesamiento de columnas.
    * **deep-translator**: Una biblioteca ligera que utiliza la API p√∫blica de Google Translate para la traducci√≥n, implementando reintentos autom√°ticos para manejar posibles fallos de red.
    
    El programa est√° dise√±ado para ser eficiente y escalable, con una clara separaci√≥n entre la l√≥gica de negocio (la traducci√≥n) y la capa de presentaci√≥n (la interfaz de usuario).
    """)